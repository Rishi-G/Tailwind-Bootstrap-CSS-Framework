// Mixins - Bootstrap 4 to Tailwind CSS

// Bootstrap breakpoint functions
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: map-get($breakpoints, $name);
  @return if($next, $next - 0.02, null);
}

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Media query mixins
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  $max: breakpoint-max($name, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}

// Screen reader only
@mixin sr-only() {
  @apply absolute w-px h-px p-0 -m-px overflow-hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Button variant mixin
@mixin button-variant($background, $border, $hover-background: darken($background, 7.5%), $hover-border: darken($border, 10%), $active-background: darken($background, 10%), $active-border: darken($border, 12.5%)) {
  background-color: $background;
  border-color: $border;
  
  &:hover {
    background-color: $hover-background;
    border-color: $hover-border;
  }
  
  &:focus,
  &.focus {
    box-shadow: 0 0 0 0.2rem rgba($background, 0.5);
  }
  
  &.disabled,
  &:disabled {
    background-color: $background;
    border-color: $border;
  }
  
  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active {
    background-color: $active-background;
    border-color: $active-border;
  }
}

// Button outline variant
@mixin button-outline-variant($color, $color-hover: #fff, $active-background: $color, $active-border: $color) {
  color: $color;
  border-color: $color;
  
  &:hover {
    color: $color-hover;
    background-color: $active-background;
    border-color: $active-border;
  }
  
  &:focus,
  &.focus {
    box-shadow: 0 0 0 0.2rem rgba($color, 0.5);
  }
  
  &.disabled,
  &:disabled {
    color: $color;
    background-color: transparent;
  }
  
  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active {
    color: $color-hover;
    background-color: $active-background;
    border-color: $active-border;
  }
}

// Clearfix
@mixin clearfix() {
  &::after {
    display: block;
    content: "";
    clear: both;
  }
}

// Border radius
@mixin border-radius($radius: $border-radius) {
  border-radius: $radius;
}

// Box shadow
@mixin box-shadow($shadow...) {
  box-shadow: $shadow;
}

// Transition
@mixin transition($transition...) {
  transition: $transition;
}

// Text truncate
@mixin text-truncate() {
  @apply overflow-hidden whitespace-nowrap;
  text-overflow: ellipsis;
}

// Hover focus
@mixin hover-focus() {
  &:hover,
  &:focus {
    @content;
  }
}

// Hover focus active
@mixin hover-focus-active() {
  &:hover,
  &:focus,
  &:active {
    @content;
  }
}

// Plain hover focus
@mixin plain-hover-focus() {
  &,
  &:hover,
  &:focus {
    @content;
  }
}